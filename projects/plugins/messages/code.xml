<?xml version="1.0" encoding="UTF-8"?>

<!--
	@package xpotronix
	@version 2.0 - Areco 
	@copyright Copyright &copy; 2003-2011, Eduardo Spotorno
	@author Eduardo Spotorno
 
	Licensed under GPL v3
	@license http://www.gnu.org/licenses/gpl-3.0.txt
-->

<code>

   <table name="sms">
	<code type="php" mode="var_def">


	var $errors;
	var $ErrorInfo;

	</code>

	<code type="php" mode="class_functions">

	function send( $to, $text, $service ) {/*{{{*/


		if ( !$to or !$text or !$service ) {

			$to or M()->error('no especifica a quien enviar el SMS');
			$text or M()->error('no he recibido texto a enviar SMS');
			$service or M()->error('no he recibido el identificador del servicio SMS');

			return false;
		}

		global $xpdoc;

		$this->errors = array();
		$this->ErrorInfo = null;
		$success = false;

		$c = new Curl();

		foreach ( SplitByLength2( $text, $xpdoc->feat->sms_size ) as $line ) {

			$url_var = "sms_{$service}_url";

			$url = sprintf( $xpdoc->config->$url_var, str_replace(' ', '', $to ), str_replace(' ', '+', $line ));

			M()->debug( 'enviando sms con ' . $url);

			$c->request( $url );

			if ( $c->errorNumber() ) {

				$this->errors[] = $c->getHttpStatus();
				$this->errors[] = $c->error();
				M()->error( "No pude conectarme con el servicio $service: ". implode( '; ', $this->errors ));

				break;
			}

			$success_match_var = "sms_{$service}_success";

			if ( preg_match( $xpdoc->config->$success_match_var, $c ) ) {

				M()->info( "Envio de mensaje satisfactorio al teléfono $to" );

			} else {

				$this->errors[] = "Error al enviar al móvil $to, el servidor ha respondido: $c"; 
				M()->error( implode( '; ', $this->errors ));
			
				break;
			} 
		}

		if ( count( $this->errors ) ) {

			$this->ErrorInfo = implode( '; ', $this->errors ) ;
			return false;

		} else {

			return true;
		}

	}/*}}}*/

	</code>
   </table>

   <table name="mailer">

      <code mode="use_decl" type="php">
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;
      </code>


	<code type="php" mode="var_def">

	var $mail;
	var $ErrorInfo;

	</code>

	<code type="php" mode="class_functions">


	function __construct() {/*{{{*/

		global $xpdoc;

		parent::__construct();

		try {
			$this->mail = new PHPMailer(true);
                	$this->mail->IsSMTP();

                } catch (Exception $e) {

                        M()->error( 'Error al enviar: '. $e->errorMessage() );
                }

		$this->mail->CharSet    = $xpdoc->config->mailer_charset or M()->warn( 'charset no definido');
		$this->mail->SMTPDebug  = $xpdoc->config->mailer_smtp_debug;
		$this->mail->SMTPAuth   = $xpdoc->config->mailer_smtp_auth;
		$this->mail->Host       = $xpdoc->config->mailer_host or M()->error( 'host no definido');
		$this->mail->Port       = $xpdoc->config->mailer_smtp_port or M()->error( 'port no definido');

		$this->mail->SMTPAutoTLS = $xpdoc->config->mailer_smtp_auto_tls;


		/* DEBUG: estas opciones

		$this->mail->SMTPAutoTLS = false;
		$this->mail->SMTPSecure = false;
		$this->mail->SMTPOptions = [
		       'ssl' => [
		       'verify_peer' => false,
		       'verify_peer_name' => false,
		       'allow_self_signed' => true ]];
		*/

		if ( $xpdoc->config->mailer_smtp_auth ) {
			$this->mail->Username   = $xpdoc->config->mailer_username or M()->warn( 'usuario SMTP no definido');
			$this->mail->Password   = $xpdoc->config->mailer_password or M()->warn( 'clave de usuario SMTP no definida');
		}

		$this->mail->SetLanguage('es');

		return $this;

	}/*}}}*/

	function from( $mail, $name = null ) {/*{{{*/

		if ( ! $name ) $name = $mail;

		try {
			$this->mail->SetFrom( $mail, $name );

                } catch (Exception $e) {

                        M()->error( 'Error en la direccion: '. $e->errorMessage() );

                }
		return $this;
	}/*}}}*/

	function to( $mail, $name = null ) {/*{{{*/

		if ( ! $name ) $name = $mail;

		try {
			$this->mail->AddAddress( $mail, $name );

                } catch (Exception $e) {

                        M()->error( 'Error en la direccion: '. $e->errorMessage() );
                }
		return $this;
	}/*}}}*/

	function reply_to( $mail, $name = null ) {/*{{{*/

		if ( ! $name ) $name = $mail;

		try {
			$this->mail->AddReplyTo( $mail, $name );

                } catch (Exception $e) {

                        M()->error( 'Error en la direccion: '. $e->errorMessage() );
                }
		return $this;
	}/*}}}*/

	function subject( $text ) {/*{{{*/

		$this->mail->Subject = $text;
		return $this;
	}/*}}}*/

	function text( $text ) {/*{{{*/

		$this->mail->AltBody = $text;
		return $this;
	}/*}}}*/

	function html( $html ) {/*{{{*/

		try {
			$this->mail->MsgHTML( $html );

                } catch (Exception $e) {

                        M()->error( 'Error en la direccion: '. $e->errorMessage() );
                }
		return $this;
	}/*}}}*/

	function attach( $file ) {/*{{{*/

		try { 
			$this->mail->AddAttachment( $file );

                } catch (Exception $e) {

                        M()->error( 'Error al adjuntar archivo: '. $e->errorMessage() );
                }
		return $this;
	}/*}}}*/

	function img_inline( $filename, $cid, $name = null ) {/*{{{*/

		$name or $name = $filename;

		try { 
			$this->mail->AddEmbeddedImage( $filename, $cid, $name );

                } catch (Exception $e) {

                        M()->error( 'Error al incrustar imagen: '. $e->errorMessage() );
                }

		return $this;

		}/*}}}*/

	function test() {

		global $xpdoc;


		$from = $xpdoc->http->from;
		$to = $xpdoc->http->to;
		$message = $xpdoc->http->message or $message = "Mensaje de prueba";

		$params = [ 'mailer_host',
			'mailer_smtp_port',
			'mailer_smtp_secure',
			'mailer_smtp_auth',
			'mailer_username',
			'mailer_password',
			'mailer_charset',
			'mailer_smtp_debug',
			'default_domain',
			'test_email',
			'email_bcc' 
		];

		$m = []; $w = []; $e = [];

			$from or $e[] = "Defe definir --from=&lt;remitente&gt;";
			$to or $e[] = "Defe definir --from=&lt;destinatario&gt;";


		$m[] = "configuracion en config.xml:";

		foreach( $params as $param ) {

			$m[] = "$param: {$xpdoc->config->$param}";
		}

		strstr( $from, '@' ) or
			$from .= "@{$xpdoc->feat->default_domain}";

		$to = ( $t = $xpdoc->config->test_email ) ? $t : $to;

		strstr( $to, '@' ) or
			$to .= "@{$xpdoc->feat->default_domain}";

		$from_name = ( $t = $xpdoc->feat->mailer_from_name ) ? $t: $from;

		$m[] = "remitente: $from, nombre: $from_name, destino: $to, de quien: $from_name";

		foreach( $m as $mm ) 
			print $mm ."\n";

		foreach( $w as $mm ) 
		print $mm ."\n";

		foreach( $e as $mm ) 
			print $mm ."\n";


		if ( count( $e ) ) {

		print( "*** hubo errores no se puede realizar la prueba ***\n" );
		exit(1);

		}


		$this->from( $from , $from_name )
			->to( $to )
			->subject( "prueba de email" )
			->html( $message );

		if ( $this->send()->ErrorInfo ) {

			print( "No se pudo enviar: {$this->ErrorInfo}" );
			$this->estatus = $this->ErrorInfo;
			$this->reintento++;

		} else {

			if ( ! $this->is_virtual() ) {

				$this->fill_primary_key();
				$this->from = $from;
				$this->to = $to;
				$this->get_attr('enviada')->now();
				$this->store();

			}


		}

	}

	function send() {/*{{{*/

		try {
			$this->mail->Send();

                } catch (Exception $e) {

			$this->ErrorInfo = $e->errorMessage(); 

                        M()->error( 'Error al enviar: '. $this->ErrorInfo );

                }
		return $this;
	}/*}}}*/

	</code>
   </table>

</code>
<!-- vim600: fdm=marker sw=3 ts=8 ai: 
-->

