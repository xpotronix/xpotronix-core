<?xml version="1.0" encoding="UTF-8"?>

<!--
	@package xpotronix
	@version 2.0 - Areco 
	@copyright Copyright &copy; 2003-2011, Eduardo Spotorno
	@author Eduardo Spotorno
 
	Licensed under GPL v3
	@license http://www.gnu.org/licenses/gpl-3.0.txt
-->

<database>

   <table name="imagen"><!--{{{-->

	   <code type="php" mode="class_functions"><![CDATA[

	   function main_sql() {/*{{{*/
	   	
                global $xpdoc;
                if ( $this->has_role( 'mesa', 'altas', 'responsable', 'licencias', 'audit' ) ) {
                       return;
                } else if ( $this->has_role( 'empleado' ) )
                       $this->sql->addWhere( "imagen.usuario_ID = '{$xpdoc->user->legajo}'" );

	   }/*}}}*/

	function source_path() {/*{{{*/

		global $xpdoc;
		return $this->feat->path_imagenes. '/'.  $this->dirname. '/'. $imagen->basename;

	}/*}}}*/

	function cargar_imagenes() {/*{{{*/

	global $xpdoc;

	require_once 'xpthumb.class.php';
	$image = new xpthumb;

	$file_utils = $xpdoc->get_instance('file_utils');

	$legajo_dir = $xpdoc->instance( 'C3_data' );


	if ( ! $xpdoc->user->legajo ) {

		if ( $xpdoc->http->usuario_ID ) {

			$xpdoc->user->attr('legajo');
			$usuario_ID = $xpdoc->http->usuario_ID;
			$xpdoc->user->legajo = $usuario_ID; 

		} else {

			M()->user( "El usuario {$xpdoc->user->user_username} no tiene un legajo asociado, no puedo continuar. Consulte con el administrador" );
			return;

		}
	}



	if ( !$legajo_dir->load( array( 'legajo_ID' => $usuario_ID ) ) ) {
      
		M()->user( "No hay asociado una ruta de directorio de las imagenes al legajo. Consulte con el administrador" );
		return;
	}

	M()->user( 'escaneando para el usuario '. $xpdoc->user->legajo );

	$nuevas = 0;
	$existentes = 0;
	$faltantes = 0;	

 	set_time_limit( 0 );

	$imagen = $xpdoc->get_instance('imagen');

	$sql = new DBQuery( $this->db );
	$sql->addTable("imagen");
	$sql->addUpdate("encontrada", 0);
	$sql->addWhere("imagen.usuario_ID = '{$xpdoc->user->legajo}'");

	M()->debug( "reset de imagen->encontrada: ". $sql->prepare() ) ;
	$sql->Exec();

	$base_path = $this->feat->path_imagenes;

	$working_path = $base_path . '/'. $legajo_dir->dirname;

	M()->debug( "escaneando imagenes para el usuario". $xpdoc->user->legajo. " y el directorio $working_path" );

	$files = $file_utils->list_directory( $working_path, array( 'jpg', 'JPG', 'TIF' ));

	// por cada entrada ...

	foreach ( $files as $file ) {

		// saca el $base_path

		$full_file = $file;

		$file = str_replace( $base_path.'/', "", $file );

		$params = pathinfo( $file );

		// completa la informacion de la imagen

		$params['usuario_ID'] = $xpdoc->user->legajo;

		M()->info( 'params: '. serialize( $params ) );

		// si no existe, la crea

		if ( ! $imagen->load( $params ) ) {

			$imagen->bind( $params, true );
			$imagen->fill_primary_key();
			$imagen->encontrada = true;
			$imagen->usuario_ID = $usuario_ID;
			$imagen->filesize = filesize( $full_file );
			$imagen->fecha = date("Y-m-d", filemtime($full_file));
			// $imagen->exim_info = (string) $image;
			$imagen->push_privileges( array( 'add' => 1 ) );
			$imagen->insert();
			M()->debug( "agregando imagen {$params['basename']}");
			$nuevas ++;

	 	} else {

			$existentes ++;
			$imagen->encontrada = true;
			$imagen->filesize = filesize( $full_file );
			// $imagen->exim_info = (string) $image;
			$imagen->push_privileges( array( 'edit' => 1 ) );
			$imagen->update();
			M()->debug( "imagen existente {$params['dirname']}");

		}

		$imagen->pop_privileges();


		/*
		// crea el directorio para cache

		$cache_dir = $base_path.'/'.$params['dirname'].'/cache';

		if ( file_exists( $cache_dir )) {

			M()->debug( "$cache_dir existente.");

		} else {

			M()->debug( "creando directorio $cache_dir");
			$file_utils->mkdir( $cache_dir );
		}

		*/
	}

	M()->user( "existentes: $existentes, nuevas: $nuevas" );

	}/*}}}*/]]>

	</code>
   </table><!--}}}-->


</database>
<!-- vim600: fdm=marker sw=3 ts=8 ai: 
-->

