<?xml version="1.0" encoding="UTF-8"?>

<!--
	@package xpotronix
	@version 2.0 - Areco 
	@copyright Copyright &copy; 2003-2011, Eduardo Spotorno
	@author Eduardo Spotorno
 
	Licensed under GPL v3
	@license http://www.gnu.org/licenses/gpl-3.0.txt
-->

<database>

	<table name="sessions">
	<code type="php" mode="var_def">

	var $active;
	var $vars;

	</code>

	<code type="php" mode="class_functions"><![CDATA[

	function __construct() {

		parent::__construct();
		$this->feat->db_cache_time = 0; // nunca cachear la sesion

	}

	function start( $application ) {/*{{{*/

		global $xpdoc;

		M()->info( "Abriendo la sesion en la aplicacion $application" );

		$max_lifetime = 0;

		// session_name( "xpotronix_$application" );

		if (ini_get('session.auto_start') > 0) {
			session_write_close();
		}


		if ( $xpdoc->config->session_handling == 'app') {

			$max_lifetime = strtime_to_secs( $xpdoc->config->session_max_lifetime );

			M()->info( 'Configurando la sesion, administrada por la aplicacion con max_lifetime '. $max_lifetime );


		} else M()->info( 'Sesion basada en el navegador' );

		$cookie_dir = NULL;

		if ( $xpdoc->config->session_base_url ) {

			M()->info( "session_base_url: {$xpdoc->config->session_base_url}" );
			preg_match('_^(https?://)([^/]+)(:0-9]+)?(/.*)?$_i', $xpdoc->config->session_base_url, $url_parts);
			$cookie_dir = $url_parts[4];
			if (substr($cookie_dir, 0, 1) != '/') $cookie_dir = '/' . $cookie_dir;
			if (substr($cookie_dir, -1) != '/') $cookie_dir .= '/';

		} else M()->info( "no hay definido un session_base_url" );

		M()->info( "max_lifetime: $max_lifetime, cookie_dir: $cookie_dir" );

		session_set_cookie_params($max_lifetime, $cookie_dir);

		session_start();

		return session_id();

	}/*}}}*/

		function read($id) {/*{{{*/

		global $xpdoc;

		$this->push_privileges( array( 'edit' => true, 'add' => true, 'list' => true, 'view' => true ) );

		if ( $this->load( $id ) ) {

			$this->vars = unserialize( $this->session_data );

			$max = strtime_to_secs( $xpdoc->config->session_max_lifetime );
			$idle = strtime_to_secs( $xpdoc->config->session_idle_time );

			M()->info( "Sesion $id encontrada: max=$max/{$this->session_lifespan}, idle=$idle/{$this->session_idle}");

			if ( $max < $this->session_lifespan || $idle < $this->session_idle ) {

				M()->info("Sesion $id expirada.");
				$this->set_user_session( $xpdoc->config->anonymous_user_id );
				$this->session_created = date('Y-m-d H:i:s');
				$this->session_updated = date('Y-m-d H:i:s');

			} else $this->active = true;

		} else {

			M()->info("Sesion $id inexistente en la base de datos, creando una");
			$this->write();
			$this->set_flag('main_sql', false);
			$this->load( $id );
			$this->set_flag('main_sql', true);
			$this->active = true;
		}

		$this->pop_privileges();
		return $this->active;

	}/*}}}*/

	function write() {/*{{{*/

		$this->push_privileges( array( 'edit' => true, 'add' => true, 'list' => true, 'view' => true ) );

		$retval = $this;

		$this->session_data = serialize( $this->vars );
		
		if ( $this->session_id ) { 

			M()->info("Actualizando sesion {$this->session_id} ");
			$this->update();

		} else {

			if ( $id = session_id() ) {
				M()->info( "Creando sesion $id");
				$this->session_id = $id;
				$this->session_created = date('Y-m-d H:i:s');
				$this->session_updated = date('Y-m-d H:i:s');
				$this->insert();
			} else $retval = NULL;
		}

		$this->pop_privileges();

		return $retval;

	}/*}}}*/

	function set_user_session( $user_id ) {/*{{{*/

		if ( $user_id === NULL ) { 

			$this->active = false;
			$this->user_id = NULL;
			M()->info( 'Sesion no encontrada' );
			
		} else if ( $user_id < 0 ) {
			
			$this->active = false;
			$this->user_id = $user_id;

		} else {
			
			$this->active = true;
			$this->user_id = $user_id;
		}

		M()->info( "Usuario: $this->user_id, Sesion: " . ($this->active ? 'activa' : 'inactiva') );
	}/*}}}*/

	function close() {/*{{{*/

		return $this->write();

	}/*}}}*/

	function destroy() {/*{{{*/

		$this->push_privileges( array( 'delete' => 1 ) );

		$id = session_id();
		M()->info( "Borrando sesion $id");
		
		$this->delete();
		session_destroy();

		$this->pop_privileges();

		return NULL;

	}/*}}}*/

	function cleanup() {/*{{{*/

		// session garbage collector

		global $xpdoc;

		M()->info( "garbage collector de la sesion, con max_lifetime: {$xpdoc->config->session_max_lifetime}, idle_time: {$xpdoc->config->session_idle_time}");

		$max = strtime_to_secs( $xpdoc->config->session_max_lifetime );
		$idle = strtime_to_secs( $xpdoc->config->session_idle_time );

		$this->sql->clear();
		$this->sql->setDelete( 'sessions' );
		$this->sql->addWhere( "UNIX_TIMESTAMP() - UNIX_TIMESTAMP(session_updated) > $idle OR UNIX_TIMESTAMP() - UNIX_TIMESTAMP(session_created) > $max" );

		$this->execute();

		return $this;

	}/*}}}*/

	]]></code>
	</table>

</database>
<!-- vim600: fdm=marker sw=3 ts=8 ai: 
-->

